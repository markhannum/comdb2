#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt

core_all_nodes() {
    local node
    local pidfl=${TMPDIR}/${DBNAME}.pid
    if [[ -z "$CLUSTER" ]] || [[ `echo $CLUSTER | grep $HOSTNAME ` ]]; then
        if [[ -n "$CLUSTER" ]] ; then
            pidfl=${TMPDIR}/${DBNAME}.$HOSTNAME.pid
        fi
        cat ${pidfl} | xargs kill -6 
    fi

    for node in ${CLUSTER} ; do
        if [ $node == $HOSTNAME ] ; then
            continue
        fi
        pidfl=${TMPDIR}/${DBNAME}.pid
        ssh -n -o StrictHostKeyChecking=no $node "cat ${pidfl} | xargs kill -6 "
    done
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function insert_records
{
    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)" > /dev/null 2>&1
    done
}

function drop_trigger
{
    typeset pid=0
    typeset j=0
    typeset killed=0
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua trigger sp" > /dev/null 2>&1 &
    pid=$!
    while [ "$killed" -eq 0 ]; do
        kill -0 $pid >/dev/null 2>&1
        if [[ $? == 0 ]]; then
            if [[ $j -gt 5 ]]; then
                echo "LONG DROP-TRIGGER: $j SECONDS, PID $pid"
            fi
            sleep 1
        else
            export killed=1
        fi
        let j=j+1
    done
#    if [[ "$killed" == 0 ]]; then
        #core_all_nodes
        #failexit "Cored all nodes"
#        failexit "Test failed"
#    fi
}

function create_trigger
{
    typeset pid=0
    typeset j=0
    typeset killed=0
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua trigger sp on (table t1 for insert)" >/dev/null 2>&1 &
    pid=$!
    while [ "$killed" -eq 0 -a "$j" -lt 5 ]; do
        kill -0 $pid >/dev/null 2>&1
        if [[ $? == 0 ]]; then
            if [[ $j -gt 5 ]]; then
                echo "LONG CREATE-TRIGGER: $j SECONDS, PID $pid"
            fi
            sleep 1
        else
            export killed=1
        fi
        let j=j+1
    done
    #if [[ "$killed" == 0 ]]; then
        #core_all_nodes
    #    failexit "Cored all nodes"
    #fi
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    write_prompt $func "Running $func"

    create_table
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure sp version 'v1' {
local function main()
    db:emit(1)
end
}$$
EOF
    insert_records &
    insert_records &
    insert_records &
    insert_records &
    insert_records &
    insert_records &

    failed=0
    j=0

    #while [[ $j -lt 200 && "$failed" == "0" ]]; do
    while [[ $j -lt 10 && "$failed" == "0" ]]; do
        mod=$(( j % 2 ))
        begin=$(date +%s)
        if [[ "$mod" == "0" ]]; then
            #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua trigger sp on (table t1 for insert)"
            create_trigger
        else
            #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua trigger sp"
            drop_trigger
        fi
        finished=$(date +%s)
        elapsed=$(( finished - begin ))
        echo "Iteration $j: Update-trigger time is $elapsed"
        if [[ $elapsed -ge 6 ]]; then
            failed=1
            echo "Failing test: trigger operations took $elapsed seconds"
        fi

        let j=j+1
    done

    touch "$stopfile"
    wait
    echo "Sleeping for 30"
    sleep 30
    [[ "$failed" -ne "0" ]] && failexit "testcase failed"
}

rm $stopfile
run_test
echo "Success"
