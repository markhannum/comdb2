#!/bin/bash

debug=1
[[ "$debug" == 1 ]] && set -x
needcluster=1
insert_records=1000
insert_count=10
insert_sleep=.5
downgrade_count=5
downgrade_sleep=10
stop_file=./halt_test
db=$1

if [[ "$needcluster" = "1" && -z "$CLUSTER" ]]; then
    echo "This test is only relevant for a CLUSTERED installation."
    exit 1
fi

if [[ -z "$stage" ]]; then
    echo "Setting stage to 'default' (set 'stage' var to override)."
    stage="default"
fi

function createtables
{
    [[ "$debug" == 1 ]] && echo "STARTING ${FUNCNAME[0]}" && set -x
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t1 {schema{int a}}$$" >/dev/null 2>&1
}

function downgrade
{
    [[ "$debug" == 1 ]] && echo "STARTING ${FUNCNAME[0]}" && set -x
    master=`cdb2sql -tabs ${CDB2_OPTIONS} $db $stage 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
    while [[ -z "$master" ]]; do
        sleep 1
        master=`cdb2sql -tabs ${CDB2_OPTIONS} $db $stage 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
    done
    cdb2sql ${CDB2_OPTIONS} --host $master $db $stage "exec procedure sys.cmd.send('downgrade')"
}

function block_until_connected
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    timeout=$1
    starttime=$(date +%s)
    err=1
    while [ $err -ne 0 ] ; do 
        err=0
        for node in $CLUSTER ; do
            cdb2sql ${CDB2_OPTIONS} $db default --host $node "select 1"
            if [[ $? != 0 ]]; then 
                err=1
            fi
        done
        sleep 1
        nowtime=$(date +%s)
        if (( nowtime - starttime >= timeout )) ; then
            echo "${FUNCNAME[0]} timed out"
            return 1
        fi
    done
}

function bounce_master
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    master=`cdb2sql -tabs ${CDB2_OPTIONS} $db default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]' `
    PARAMS="$db --no-global-lrl"
    CMD="source ${TESTDIR}/replicant_vars ; ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${db}.lrl -pidfile ${TMPDIR}/${db}.pid"
    if [[ -n "$master" ]]; then
        if [ $master == $(hostname) ]; then
            (
                kill -9 $(cat ${TMPDIR}/${db}.${node}.pid)
                ${DEBUG_PREFIX} ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${db}.lrl -pidfile ${TMPDIR}/${db}.${node}.pid 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >$TESTDIR/logs/${db}.${node}.db 2>&1
            ) &
        else
            kill -9 $(cat ${TMPDIR}/${db}.${master}.pid)
            ssh -o StrictHostKeyChecking=no -tt $master ${DEBUG_PREFIX} ${CMD} 2>&1 </dev/null > >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> $TESTDIR/logs/${db}.${master}.db) &
            echo $! > ${TMPDIR}/${db}.${master}.pid
        fi
    fi
}


function exitdatabase
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    if [[ "$debug_test" != 1 ]]; then
        if [[ -n "$CLUSTER" ]]; then
            for node in $CLUSTER; do
                kill -9 $(cat ${TMPDIR}/${db}.${node}.pid)
            done
        else
            kill -9 $(cat ${TMPDIR}/${db}.pid)
        fi
    fi
}



function insert_thread
{
    [[ "$debug" == 1 ]] && echo "STARTING ${FUNCNAME[0]}" && set -x
    cmd_file=$1
    i=0
    while [[ ! -f $stop_file ]]; do 
        cdb2sql ${CDB2_OPTIONS} $db $stage - < $cmd_file >/dev/null 2>&1
        sleep $insert_sleep
    done

#    rm $cmd_file
}

function runtest
{
    [[ "$debug" == 1 ]] && echo "STARTING ${FUNCNAME[0]}" && set -x

    cmd_file=./insert.sql
    echo "BEGIN" > $cmd_file
    while [[ $i -lt $insert_records ]]; do
        echo "INSERT INTO t1 VALUES (1)" >> $cmd_file
        let i=i+1
    done
    echo "COMMIT" > $cmd_file

    rm $stop_file
    pidlist=""

    while [[ $i -lt $insert_count ]]; do
        insert_thread $cmd_file &
        pidlist="$pidlist $!"
        let i=i+1
    done

    i=0
    while [[ $i -lt $downgrade_count ]] ; do
        bounce_master
        block_until_connected 20
        sleep $downgrade_sleep
        let i=i+1
    done
    touch $stop_file
    wait $pidlist
    rm $cmd_file
    exitdatabase
}

createtables
runtest

echo "Success"
exit 0
