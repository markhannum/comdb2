#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1
[[ $debug == "1" ]] && set -x

source ${TESTSROOTDIR}/tools/runit_common.sh

# Grab my database name.
export repsleep=5
export repname=rep${DBNAME}
export repdir=${DBDIR}/$repname
export replog=$repdir/log.txt
export COPYCOMDB2_EXE=${BUILDDIR}/db/copycomdb2

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    kill -9 $(cat $repdir/${repname}.pid)
    exit -1
}

function make_phys_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="make_phys_rep"
    myhost=$(hostname)

    mkdir -p $repdir

    if [[ -z "$CLUSTER" ]]; then
        cl="-y @localhost"
    else
        cl="-y @$(echo $CLUSTER | tr ' ' ',')"
    fi

    if [[ -n "$CLUSTER" ]]; then
        if [[ "$CLUSTER" =~ .*$myhost.* ]]; then
            rmt=""
        else
            clarray=($CLUSTER)
            rmt="${clarray[0]}:"
        fi
    fi

    write_prompt $func "Creating physical rep $repname"
    ${COPYCOMDB2_EXE} -x ${COMDB2_EXE} -H $repname $cl $rmt${DBDIR}/${DBNAME}.lrl $repdir $repdir
    if [ ! $? -eq 0 ]; then
        write_prompt $func "Copycomdb2 failed"
        exit 1
    fi

    write_prompt $func "Starting replicant database, replog is $replog"
    ( timeout --kill-after=5s $TEST_TIMEOUT $COMDB2_EXE $repname --lrl $repdir/${repname}.lrl --pidfile $repdir/${repname}.pid >$replog 2>&1) &
}

override_physrep_sp()
{
    local mnode=`getmaster`
    # Override the register_replicant stored procedure
    ${CDB2SQL_EXE} $CDB2_OPTIONS $DBNAME --host $mnode "create procedure 'sys.physrep.register_replicant' version '1' { `cat ./register_replicant.lua`  }"
}

function setup
{
    [[ $debug == "1" ]] && set -x
    typeset func="setup"

    override_physrep_sp

    make_phys_rep
    sleep $repsleep
}

function tear_down
{
    kill -9 $(cat $repdir/${repname}.pid)
}

function run_tests
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE TABLE t1 (a INT)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"

    cnt=0
    # Wait for 3 values to propogate to physical replicant
    while [[ "$cnt" != "3" ]]; do
        cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1")
        sleep 1
    done

    # Try to insert against physical replicant 
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "insert into t1(a) values(4)"
    [[ $? == 0 ]] && failexit "Database allowed inserts against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database insert against physical replicant changed count"

    # Try to delete against physical replicant 
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "delete from t1 where 1"
    [[ $? == 0 ]] && failexit "Database allowed deletes against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database deletes against physical replicant changed count"

    # Try to update a physical replicant
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "update t1 set a = 4 where 1"
    [[ $? == 0 ]] && failexit "Database allowed updates against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database updates against physical replicant changed count"

    # Create a procedure - we should be able to run on physical replicant
    echo "Create test procedure"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure test version 'test1' {
local function main(test_no)
  -- read-only test
  if(test_no == '1') then
    db:column_type("string", 1);
    db:emit("123456")
    return 0
  end
  -- insert a record
  if(test_no == '2') then
    local tbl = db:table("t1")
    tbl:insert({a='10'})
    db:column_type("string", 1);
    db:emit("10")
    return 0
  end
end}$$
put default procedure test 'test1'
EOF
    
    echo "Run read-only procedure against parent - should succeed"
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "exec procedure test('1')")
    echo "$x"
    [[ "$x" != "123456" ]] && failexit "parent readonly output not correct"

    sleep 3

    echo "Run read procedure against physrep - should succeed"
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $repname --host localhost "exec procedure test('1')")
    echo "$x"
    [[ "$x" != "123456" ]] && failexit "physrep readonly output not correct"

    # Run write procedure against parent
    echo "Run write procedure against parent - should succeed"
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "exec procedure test('2')")
    echo "$x"
    [[ "$x" != "10" ]] && failexit "parent write output not correct"

    # verify record
    echo "Verify inserted record from sp"
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from t1 where a=10")
    echo "$x"
    [[ "$x" != "1" ]] && failexit "parent doesn't have the 10 record"

    echo "Wait for physrep to see record"
    cnt=0
    # Wait for 3 values to propogate to physical replicant
    while [[ "$cnt" != "1" ]]; do
        cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a=10")
        sleep 1
    done

    echo "Run write sp against physrep - should fail."
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $repname --host localhost "exec procedure test('2')")
    [[ $? == 0 ]] && failexit "Database allowed write-sp against physical replicatn"
    echo "TODO: better error message"

    echo "Create audit trigger (taken from sp.test)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<EOF
create table foraudit {$(cat foraudit.csc2)}\$\$
create table audit {$(cat audit.csc2)}\$\$
create procedure audit version 'sptest' {$(cat audit.lua)}\$\$
create procedure cons0 version 'sptest' {$(cat cons.lua)}\$\$
create lua trigger audit on (table foraudit for insert and update and delete)
create lua consumer cons0 on (table foraudit for insert and update and delete)
EOF

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<EOF > /dev/null 2>&1 &
exec procedure cons0(true)
EOF

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into foraudit(i) select * from generate_series(1, 500)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from foraudit where 1"
}

setup
run_tests
tear_down

echo "Success!"
