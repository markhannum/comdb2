#!/usr/bin/env bash

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/runit_common.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

PARTITIONED=0
if [[ $DBNAME == *"partitioned"* ]]; then
    PARTITIONED=1
fi


function setup()
{
    if [[ $PARTITIONED -eq 1 ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int) partitioned by manual retention 10 start 1"
    else
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
        #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    fi
    j=0
    while [[ $j -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, 1000)"
        if [[ $PARTITIONED -eq 1 ]]; then
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put counter t1 increment"
        fi
        sleep 1
        j=$((j+1))
    done
}

function force_delay_sc()
{
    for node in $CLUSTER; do
        $CDB2SQL_EXE $CDB2_OPTIONS --host $node $DBNAME "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
        $CDB2SQL_EXE $CDB2_OPTIONS --host $node $DBNAME "exec procedure sys.cmd.send('scdelay 500')"
    done
}

function add_index()
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index t1a on t1(a)"
}

function bounce_cluster()
{
    master=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y'")

    for node in $CLUSTER; do
        if [[ $node != $master ]]; then
            kill_restart_node $node 10
            force_delay_sc
            sleep 10
        fi
    done
    kill_restart_node $master 10
    force_delay_sc
    sleep 10
    force_delay_sc

    allup=0
    while [[ "$allup" -eq 0 ]]; do
        allup=1
        for node in $CLUSTER; do
            $CDB2SQL_EXE $CDB2_OPTIONS --host $node $DBNAME "select 1" 2>/dev/null 1>/dev/null
            if [[ $? -ne 0 ]]; then
                allup=0
            fi
        done
        if [[ "$allup" -eq 0 ]]; then
            sleep 1
        fi
    done
}

function check_oldfile
{
    master=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y'")
    j=0
    while [[ $j -lt 60 ]]; do
        oldfile=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $master $DBNAME "exec procedure sys.cmd.send('stat oldfile')")
        if [[ $oldfile != *"oldfile hash is NULL"* ]]; then
            echo "$oldfile"
            failexit "oldfile hash is not NULL"
        fi
        let j=j+1
        sleep 1
    done
}

if [[ -z "$CLUSTER" ]]; then
    echo "This test requires a cluster"
    exit 1
fi

rm -Rf *failexit >/dev/null 2>&1
setup
force_delay_sc
add_index &
pid=$!
echo "Sleeping 120 to verify oldfile behavior before bounce"
sleep 120
check_oldfile
bounce_cluster
j=0
while [[ $j -lt 2 ]]; do
    check_oldfile
    let j=j+1
    sleep 1
done
echo "Success!"
