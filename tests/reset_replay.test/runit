#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export maxrecord=10
export recordcount=5
export stopfile=./stopfile.txt
export threads=10
export limit=1
export pidlist=""
export verbose=0

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    for p in $pidlist; do
        kill -9 $p
    done
    echo "Failed: $1"
    exit -1
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_up"
    write_prompt $func "Running $func"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

# Delete, sleep random, then re-insert a record into t2
function delete_t2
{
    [[ $debug == "1" ]] && set -x
    typeset func="toggle-t2"
    typeset cnt=0
    write_prompt $func "Running $func"

    while [[ ! -f $stopfile ]]; do
        x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "delete from t2 where 1" 2>&1)
        [[ $? != 0 ]] && failexit "$func: Error from delete: $x"
        let cnt=cnt+1
        [[ $(( cnt % 100 )) == 0 ]] && write_prompt $func "Completed $cnt iterations"
    done
}

function runthread
{
    [[ $debug == "1" ]] && set -x
    typeset func="runthread-$1"
    typeset r=0
    typeset cnt=0
    typeset outfile=${func}.out

    > $outfile

    coproc $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - 2>&1
    export pidlist="$COPROC_PID $pidlist"

    echo "set transaction read committed" >&"${COPROC[1]}"
    
    while [[ ! -f $stopfile ]]; do

        typeset r1=$(( ( RANDOM % maxrecord ) + 1 ))
        typeset r2=$(( r1 + maxrecord ))
        typeset r3=$(( ( RANDOM % maxrecord ) + 1 ))
        typeset er=$(( ( RANDOM % 100 ) ))

        if [[ "$er" == 0 ]]; then
            echo "begin" >&"${COPROC[1]}"
            echo "update t1 set a = $r1 where a = $r2" >&"${COPROC[1]}"
            echo "insert into t2(a) values($r3)" >&"${COPROC[1]}"
            # intentionally leave txn open & issue a begin
            echo "begin" >&"${COPROC[1]}"
        fi

        echo "begin" >&"${COPROC[1]}"
        echo "update t1 set a = $r2 where a = $r1" >&"${COPROC[1]}"
        echo "insert into t2(a) values($r3)" >&"${COPROC[1]}"
        echo "commit" >&"${COPROC[1]}"

        read -r -t 0 x <&"${COPROC[0]}" 
        r=$?
        while [[ $r == 0 ]] ; do
            read -r -t 1 x <&"${COPROC[0]}" 
            read -r -t 0 y <&"${COPROC[0]}" 
            r=$?
            [[ "$verbose" == 1 ]] && write_prompt $func "> $x"
            echo "$x" >> $outfile
        done

        echo "begin" >&"${COPROC[1]}"
        echo "update t1 set a = $r1 where a = $r2" >&"${COPROC[1]}"
        echo "insert into t2(a) values($r3)" >&"${COPROC[1]}"
        echo "commit" >&"${COPROC[1]}"

        read -r -t 0 x <&"${COPROC[0]}" 
        r=$?
        while [[ $r == 0 ]] ; do
            read -r -t 1 x <&"${COPROC[0]}" 
            read -r -t 0 y <&"${COPROC[0]}" 
            r=$?
            [[ "$verbose" == 1 ]] && write_prompt $func "> $x"
            echo "$x" >> $outfile
        done

        let cnt=cnt+1
        [[ $(( cnt % 100 )) == 0 ]] && write_prompt $func "Completed $cnt iterations"
    done
    echo "quit" >&"${COPROC[1]}"
    sleep 1
}

function populate_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="populate_table"
    typeset j=0
    write_prompt $func "Running $func"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select value from generate_series(1, $maxrecord)" 2>&1)
    [[ $? -ne 0 ]] && failexit "Failed populating t1: $x"
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=540
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset j=0

    write_prompt $func "Running $func"

    rm $stopfile

    create_table
    create_unique_index
    create_table t2
    create_index t2

    populate_tables

    delete_t2 &

    while [[ $j -lt $threads ]]; do
        runthread $j &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        if [[ -z "$CLUSTER" ]]; then
            verify_up $(hostname)
        else
            for node in $CLUSTER; do
                verify_up $node
            done
        fi
        sleep 1
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

run_test
echo "Success"
